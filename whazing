#!/bin/bash

git pull

# Verifica se o arquivo /etc/os-release existe
if [[ -f /etc/os-release ]]; then
    # Carrega as informações do sistema
    . /etc/os-release
    OS_NAME=$ID
    OS_VERSION=${VERSION_ID//\"/}  # Remove aspas se existirem
else
    echo "Erro: Não foi possível detectar a versão do sistema operacional."
    exit 1
fi

# Verifica se o sistema é Ubuntu e se a versão é compatível
if [[ "$OS_NAME" != "ubuntu" || ("$OS_VERSION" != "20.04" && "$OS_VERSION" != "22.04") ]]; then
    echo "Erro: Este script só pode ser executado no Ubuntu 20.04 ou 22.04."
    echo "Sistema detectado: $OS_NAME $OS_VERSION"
    exit 1
fi

echo "Sistema compatível detectado: $OS_NAME $OS_VERSION"
echo "Continuando instalador..."
sleep 1

# Verifica se o sistema está aguardando reinicialização
if [ -f /var/run/reboot-required ]; then
    echo "⚠️  O sistema precisa ser reiniciado antes de executar este script."
    echo "❌ Saindo..."
    exit 1
fi

echo "✅ Nenhuma reinicialização pendente. Continuando a execução..."

# reset shell colors
tput init

# https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$PROJECT_ROOT/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# required imports
source "${PROJECT_ROOT}"/variables/manifest.sh
source "${PROJECT_ROOT}"/utils/manifest.sh
source "${PROJECT_ROOT}"/lib/manifest.sh

# user configs file
if [[ ! -e "${PROJECT_ROOT}"/config ]]; then
  cat << EOF > "${PROJECT_ROOT}"/config
deploy_password=${senha}
EOF
fi

# this file has passwords
sudo su - root <<EOF
chown root:root "${PROJECT_ROOT}"/config
chmod 700 "${PROJECT_ROOT}"/config
EOF
source "${PROJECT_ROOT}"/config

# interactive CLI
inquiry_options

# dependencies related
system_update
system_set_timezone
system_puppeteer_dependencies
system_sysctl
system_node_install
system_pm2_install
system_docker_install
instalacao_firewall
system_snapd_install
system_nginx_install
system_certbot_install

# system config
system_create_user

# backend related
system_unzip_whazing
system_set_user_mod
backend_set_env
backend_db_create
backend_node_dependencies
system_docker_restart
backend_db_migrate
backend_db_seed
backend_start_pm2
backend_nginx_setup

# frontend related
frontend_set_env
frontend_node_dependencies
frontend_quasar
frontend_node_build
frontend_start_pm2
frontend_nginx_setup

# network related
system_nginx_conf
system_nginx_restart
system_certbot_setup
system_docker_restart
criar_cron
system_success
